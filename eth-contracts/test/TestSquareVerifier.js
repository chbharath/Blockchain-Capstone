// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

const proof = require("../../zokrates/code/square/proof.json");
contract('TestVerifier', accounts => {
    const account_one = accounts[0];

    describe('Verifier contract', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});

        });
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Test for correct proof scenario', async function () { 
            //proof = JSON.parse(fs.readFileSync("path/to/your/proof.json"))
            let result = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
            assert.equal(result, true, "Not correct proof");
        });

        // Test verification with incorrect proof
        it('Test for failed proof scenario', async function () { 
            cheat = [...proof.inputs]
            cheat[cheat.length-1] = cheat[cheat.length-1].replace(/[01]$/, cheat[cheat.length-1][65] == '1' ? '0': '1')

            await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, cheat)
        });

    });

});